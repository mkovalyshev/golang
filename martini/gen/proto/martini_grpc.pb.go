// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: martini.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MartiniClient is the client API for Martini service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MartiniClient interface {
	Echo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EchoMessage, error)
	GetEntity(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Entity, error)
}

type martiniClient struct {
	cc grpc.ClientConnInterface
}

func NewMartiniClient(cc grpc.ClientConnInterface) MartiniClient {
	return &martiniClient{cc}
}

func (c *martiniClient) Echo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EchoMessage, error) {
	out := new(EchoMessage)
	err := c.cc.Invoke(ctx, "/main.Martini/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *martiniClient) GetEntity(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/main.Martini/GetEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MartiniServer is the server API for Martini service.
// All implementations must embed UnimplementedMartiniServer
// for forward compatibility
type MartiniServer interface {
	Echo(context.Context, *emptypb.Empty) (*EchoMessage, error)
	GetEntity(context.Context, *EntityRequest) (*Entity, error)
	mustEmbedUnimplementedMartiniServer()
}

// UnimplementedMartiniServer must be embedded to have forward compatible implementations.
type UnimplementedMartiniServer struct {
}

func (UnimplementedMartiniServer) Echo(context.Context, *emptypb.Empty) (*EchoMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedMartiniServer) GetEntity(context.Context, *EntityRequest) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}
func (UnimplementedMartiniServer) mustEmbedUnimplementedMartiniServer() {}

// UnsafeMartiniServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MartiniServer will
// result in compilation errors.
type UnsafeMartiniServer interface {
	mustEmbedUnimplementedMartiniServer()
}

func RegisterMartiniServer(s grpc.ServiceRegistrar, srv MartiniServer) {
	s.RegisterService(&Martini_ServiceDesc, srv)
}

func _Martini_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MartiniServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Martini/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MartiniServer).Echo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Martini_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MartiniServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Martini/GetEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MartiniServer).GetEntity(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Martini_ServiceDesc is the grpc.ServiceDesc for Martini service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Martini_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Martini",
	HandlerType: (*MartiniServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Martini_Echo_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _Martini_GetEntity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "martini.proto",
}
